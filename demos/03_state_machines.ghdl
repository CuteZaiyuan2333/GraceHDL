# GraceHDL 状态机展示
# 展示基本的状态机设计

# 交通灯控制器
module traffic_light_controller:
input(
    wire clk,
    wire rst,
    wire emergency
)
output(
    wire(1, 0) ns_light,
    wire(1, 0) ew_light
)

register(
    reg(2, 0) current_state,
    reg(7, 0) timer
)

run(clk.posedge):
    if rst:
        current_state = 0
        timer = 0
    else:
        case current_state:
            0:  # NS_GREEN
                if emergency:
                    current_state = 3
                    timer = 0
                elif timer == 30:
                    current_state = 1
                    timer = 0
                else:
                    timer = timer + 1
            1:  # NS_YELLOW
                if timer == 5:
                    current_state = 2
                    timer = 0
                else:
                    timer = timer + 1
            2:  # EW_GREEN
                if emergency:
                    current_state = 3
                    timer = 0
                elif timer == 30:
                    current_state = 4
                    timer = 0
                else:
                    timer = timer + 1
            3:  # EMERGENCY
                if timer == 10:
                    current_state = 0
                    timer = 0
                else:
                    timer = timer + 1
            4:  # EW_YELLOW
                if timer == 5:
                    current_state = 0
                    timer = 0
                else:
                    timer = timer + 1
            default:
                current_state = 0

assign:
    case current_state:
        0:  # NS_GREEN
            ns_light = 2  # GREEN
            ew_light = 0  # RED
        1:  # NS_YELLOW
            ns_light = 1  # YELLOW
            ew_light = 0  # RED
        2:  # EW_GREEN
            ns_light = 0  # RED
            ew_light = 2  # GREEN
        3:  # EMERGENCY
            ns_light = 0  # RED
            ew_light = 0  # RED
        4:  # EW_YELLOW
            ns_light = 0  # RED
            ew_light = 1  # YELLOW
        default:
            ns_light = 0
            ew_light = 0

# 序列检测器
module sequence_detector:
input(
    wire clk,
    wire rst,
    wire data_in
)
output(
    wire sequence_found
)

register(
    reg(2, 0) state
)

run(clk.posedge):
    if rst:
        state = 0
    else:
        case state:
            0:  # IDLE
                if data_in:
                    state = 1
            1:  # S1
                if data_in:
                    state = 2
                else:
                    state = 0
            2:  # S2
                if data_in:
                    state = 2
                else:
                    state = 3
            3:  # S3
                if data_in:
                    state = 4
                else:
                    state = 0
            4:  # FOUND
                state = 0
            default:
                state = 0

assign:
    sequence_found = (state == 4)

# 自动售货机
module vending_machine:
input(
    wire clk,
    wire rst,
    wire coin_5,
    wire coin_10,
    wire select_item
)
output(
    wire dispense_item,
    wire(3, 0) change
)

register(
    reg(3, 0) credit,
    reg(2, 0) state
)

run(clk.posedge):
    if rst:
        credit = 0
        state = 0
    else:
        case state:
            0:  # IDLE
                if coin_5:
                    credit = credit + 5
                elif coin_10:
                    credit = credit + 10
                if credit >= 15 and select_item:
                    state = 1
            1:  # DISPENSE
                state = 2
            2:  # CHANGE
                state = 0
                credit = 0
            default:
                state = 0

assign:
    dispense_item = (state == 1)
    case state:
        2:  # CHANGE
            change = credit - 15
        default:
            change = 0